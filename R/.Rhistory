}
### generate column names for the data sets ###
yPredef = sapply(1:ncol(XB), function(x) {paste("Y.",x,sep="",collapse="")})
xPredef = sapply(1:ncol(X), function(x) {paste("X.",x,sep="",collapse="")})
if (!is.na(yNames) && !is.na(xNames)) {
dataSetNames = c("setID", yNames, xNames)
} else if (!is.na(yNames) && is.na(xNames)) {
dataSetNames = c("setID", yNames, xPredef)
} else if (is.na(yNames) && !is.na(xNames)) {
dataSetNames = c("setID", yPredef, xNames)
} else {
dataSetNames = c("setID", yPredef, xPredef)
}
### buil the data set blocks ###
sapply(1:numSets, function(setNumber) {
# set start and end iteration numbers for this block
startIter = ((setNumber-1)*blockSize) + 1
if (setNumber == numSets && lastSetSize > 0 && lastSetSize != blockSize) {
numDataSets = lastSetSize
} else {
numDataSets = blockSize
}
endIter = startIter + numDataSets - 1;
cat("Generating data sets ", startIter, " to ", endIter, "\n")
# generate numDataSets number of data sets
dataSet = do.call("rbind",
lapply(1:numDataSets, function(blockNumber) {
errorMatrix =
mvrnorm(n = totalN,
mu=rep(0, nrow(design@SigmaError)),
design@SigmaError)
yData = XB + errorMatrix
dataBlock = data.frame(setID=((setNumber-1)*blockSize+blockNumber),Y=yData, X=X)
return(dataBlock)
}))
# write to the output directory
names(dataSet) = dataSetNames
filename = paste(outputDir,"/", filePrefix,startIter,"to",endIter,".csv",sep="")
write.csv(dataSet, row.names=FALSE, file=filename)
return(filename)
}) # end sapply
}
)
Rprof("prof.out")
empiricalPower(design, glh, replicates=10, realizations=10)
Rprof(NULL)
#
#  Package glmmPower calculates power for the general linear
#  multivariate model
#  Copyright (C) 2013 Sarah Kreidler.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#
# Provides the design.glmmFG class which defines matrices
# for the general linear multivariate or univariate model
# with one or more Gaussian covariates.
#
# For notation and theoretical details, see
#
# 1. Glueck DH, Muller KE. Adjusting power for a baseline covariate in linear models.
# Stat Med. 2003;22(16):2535â€“2551. doi:10.1002/sim.1341.
#
# 2. Muller KE, Stewart PW. Linear model theory: univariate, multivariate, and mixed models.
# Hoboken, New Jersey: John Wiley and Sons; 2006.
#
#
library(magic)
library(car)
### Copied from car package since not exported
Pillai <- function (eig, q, df.res) {
test <- sum(eig/(1 + eig))
p <- length(eig)
s <- min(p, q)
n <- 0.5 * (df.res - p - 1)
m <- 0.5 * (abs(p - q) - 1)
tmp1 <- 2 * m + s + 1
tmp2 <- 2 * n + s + 1
c(test, (tmp2/tmp1 * test)/(s - test), s * tmp1, s * tmp2)
}
Wilks <- function (eig, q, df.res) {
test <- prod(1/(1 + eig))
p <- length(eig)
tmp1 <- df.res - 0.5 * (p - q + 1)
tmp2 <- (p * q - 2)/4
tmp3 <- p^2 + q^2 - 5
tmp3 <- if (tmp3 > 0)
sqrt(((p * q)^2 - 4)/tmp3)
else 1
c(test, ((test^(-1/tmp3) - 1) * (tmp1 * tmp3 - 2 * tmp2))/p/q,
p * q, tmp1 * tmp3 - 2 * tmp2)
}
HL <- function (eig, q, df.res) {
test <- sum(eig)
p <- length(eig)
m <- 0.5 * (abs(p - q) - 1)
n <- 0.5 * (df.res - p - 1)
s <- min(p, q)
tmp1 <- 2 * m + s + 1
tmp2 <- 2 * (s * n + 1)
c(test, (tmp2 * test)/s/s/tmp1, s * tmp1, tmp2)
}
Roy <- function (eig, q, df.res) {
p <- length(eig)
test <- max(eig)
tmp1 <- max(p, q)
tmp2 <- df.res - tmp1 + q
c(test, (tmp2 * test)/tmp1, tmp1, tmp2)
}
#
# utility function to extract p-value from linearHypothesis call
#
getTestResults <- function(x) {
test = x$test
SSPE.qr <- qr(x$SSPE)
# the following code is adapted from summary.manova
eigs <- Re(eigen(qr.coef(SSPE.qr, x$SSPH), symmetric = FALSE)$values)
if ("Pillai" %in% test)
tests <- Pillai(eigs, x$df, x$df.residual)
else if ("Wilks" %in% test)
tests <- Wilks(eigs, x$df, x$df.residual)
else if ("Hotelling-Lawley" %in% test)
tests <- HL(eigs, x$df, x$df.residual)
else if ("Roy" %in% test)
tests <- Roy(eigs, x$df, x$df.residual)
ok <- tests[2] >= 0 & tests[3] > 0 & tests[4] > 0
ok <- !is.na(ok) & ok
testResults <- data.frame(test=x$test,
Df=x$df,
testStat=tests[1],
approxF=tests[2],
ndf=tests[3],
ddf=tests[4],
ProbF=pf(tests[2], tests[3], tests[4],
lower.tail = FALSE))
return (testResults)
}
#
# design.glmmFG
#
# Class describing the general linear model with fixed predictors and
# one or more Gaussian covariates
#
setClass (
"design.glmmFG",
representation ( name = "character",
description = "character",
XEssence = "matrix",
perGroupN = "numeric",
Beta = "matrix",
SigmaY = "matrix",
SigmaG = "matrix",
SigmaYG = "matrix"
),
prototype ( name ="",
description ="",
XEssence = diag(2),
perGroupN = 10,
Beta = matrix(c(1,0),nrow=2),
SigmaY = matrix(c(1)),
SigmaG = matrix(c(1)),
SigmaYG = matrix(c(0.5))
),
validity = function(object) {
#
# Note, the class definition will already enforce that the
# matrices are non-null
#
# make sure that Sigma Y is square, symmetric and positive definite
if (!isSymmetric(object@SigmaY)) {
stop("SigmaY matrix is not symmetric")
} else {
sigmaYEigenValues = eigen(object@SigmaY)
if (sum(sigmaYEigenValues$values > 0) < length(sigmaYEigenValues$values)) {
stop("SigmaY matrix is not positive definite")
}
}
# make sure that Sigma G is square, symmetric and positive definite
if (!isSymmetric(object@SigmaG)) {
stop("SigmaG matrix is not symmetric")
} else {
sigmaGEigenValues = eigen(object@SigmaG)
if (sum(sigmaGEigenValues$values > 0) < length(sigmaGEigenValues$values)) {
stop("SigmaY matrix is not positive definite")
}
}
# check matrix conformance
if (ncol(object@XEssence) != nrow(object@Beta)) {
stop("The number of columns in the essence X matrix does not match the
number of columns in the Beta matrix")
} else if (ncol(object@Beta) != nrow(object@SigmaY)) {
stop("The number of columns in the Beta matrix does not match the
number of rows in the SigmaY matrix")
} else if (ncol(object@SigmaYG) != nrow(object@SigmaG)) {
stop("The number of columns in the SigmaYG matrix does not match the
number of rows in the SigmaG matrix")
} else if (nrow(object@SigmaYG) != nrow(object@SigmaY)) {
stop("The number of rows in the SigmaYG matrix does not match the
number of rows in the SigmaY matrix")
}
return(TRUE)
}
)
test = new("design.glmmFG", name="Pre/Post",
SigmaY=diag(2), SigmaG=matrix(c(2)), SigmaYG=matrix(c(0.3,0.4),nrow=2),
XEssence=diag(2), Beta=matrix(c(1,1,0,0), nrow=2))
##
# simulateData: simulate data sets for the specified study design
#
# Args:
#  design (required) - the glmmFG study design object
#  replicates (optional) - the total number of data sets
#  blockSize (optional) - the number of data sets to include in each file
#  outputDir (required) - directory in which to write the data sets
#  filePrefix (optional) - prefix added to filenames
#  xNames (optional) - column names for the predictors
#  yNames (optional) - column names for the outcomes
#
# Outputs:
#  writes simulated data to disk in CSV format.
#  Filnames follow the pattern <filePrefix><start>To<end>.csv
#  (if filePrefix unspecified, then simulatedData<start>To<end>.csv)
#  Files have the format
#
#  dataSetID | Y (outcomes) | X (predictors)
#
#
setGeneric("simulateData", function(design, replicates=10000, blockSize=1000,
outputDir=".", filePrefix="simulatedData",
xNames=NA, yNames=NA, ...) standardGeneric("simulateData"))
setMethod("simulateData", "design.glmmFG",
function(design, replicates=1000, blockSize=100,
outputDir=".", filePrefix="simulatedData",
xNames=NA, yNames=NA, realizations=1000) {
if (is.na(design@perGroupN)) {
stop("Per group sample size not specified in study design")
}
if (!is.na(xNames) && length(xNames) != (ncol(design@XEssence) + ncol(design@SigmaG))) {
stop("The number of values in xNames does not match the number of columns in XEssence")
}
if (!is.na(yNames) && length(yNames) != ncol(design@Beta)) {
stop("The number of values in yNames does not match the number of columns in Beta")
}
### calculate the mean, XB for fixed predictors ###
# first, calculate the full X matrix
X = matrix(rep(1,design@perGroupN), nrow=design@perGroupN) %x% design@XEssence
# calculate XB
XB = X %*% design@Beta
# total sample size
totalN = nrow(X)
### determine the number of sets and the size of each set ###
# when the blocksize does not divide evenly into the
# total replicates, the size of the last set is the remainder
lastSetSize = replicates %% blockSize;
numSets = floor(replicates / blockSize)
if (lastSetSize > 0) {
numSets = numSets + 1
}
### generate column names for the data sets ###
yPredef = sapply(1:ncol(XB), function(x) {paste("Y.",x,sep="",collapse="")})
xPredef = c(sapply(1:ncol(X), function(x) {paste("XF.",x,sep="",collapse="")}),
sapply(1:ncol(design@SigmaG), function(x) {paste("XG.",x,sep="",collapse="")}))
if (!is.na(yNames) && !is.na(xNames)) {
dataSetNames = c("realizationID", "setID", yNames, xNames)
} else if (!is.na(yNames) && is.na(xNames)) {
dataSetNames = c("realizationID", "setID", yNames, xPredef)
} else if (is.na(yNames) && !is.na(xNames)) {
dataSetNames = c("realizationID", "setID", yPredef, xNames)
} else {
dataSetNames = c("realizationID", "setID", yPredef, xPredef)
}
#
# Calculate the covariance of errors per Glueck and Muller
#
SigmaError = design@SigmaY - design@SigmaYG %*% solve(design@SigmaG) %*% t(design@SigmaYG)
### generate the realizations ###
sapply(1:realizations, function(realizationID) {
XG = mvrnorm(n = totalN,
mu=rep(0, nrow(design@SigmaG)),
design@SigmaG)
### buil the data set blocks ###
sapply(1:numSets, function(setNumber) {
# set start and end iteration numbers for this block
startIter = ((setNumber-1)*blockSize) + 1
if (setNumber == numSets && lastSetSize > 0 && lastSetSize != blockSize) {
numDataSets = lastSetSize
} else {
numDataSets = blockSize
}
endIter = startIter + numDataSets - 1;
cat("Generating data sets ", startIter, " to ", endIter, "\n")
# generate numDataSets number of data sets
dataSet = do.call("rbind",
lapply(1:numDataSets, function(blockNumber) {
errorMatrix =
mvrnorm(n = totalN,
mu=rep(0, nrow(SigmaError)),
SigmaError)
yData = XB + errorMatrix
dataBlock = data.frame(realizationID=realizationID,
setID=((setNumber-1)*blockSize+blockNumber),
Y=yData, X=X, XG=XG)
return(dataBlock)
}))
# write to the output directory
names(dataSet) = dataSetNames
filename = paste(outputDir,"/", filePrefix,"Realization", realizationID, "Iter",
startIter,"to",endIter,".csv",sep="")
write.csv(dataSet, row.names=FALSE, file=filename)
return(filename)
}) # end sapply
})
}
)
#
# Obtain a single realization of the X matrix
# with randomly generated covariates
#
#
setGeneric("simulateXMatrix", function(design) standardGeneric("simulateXMatrix"))
setMethod("simulateXMatrix", "design.glmmFG",
function(design) {
# first, calculate the full X matrix
XF = matrix(rep(1,design@perGroupN), nrow=design@perGroupN) %x% design@XEssence
# total sample size
totalN = nrow(XF)
# generate the covariates
XG = mvrnorm(n = totalN,
mu=rep(0, nrow(design@SigmaG)),
design@SigmaG)
X = data.frame(XF,XG)
names(X) = c(sapply(1:ncol(XF), function(x) {paste("XF.",x,sep="",collapse="")}),
sapply(1:ncol(design@SigmaG), function(x) {paste("XG.",x,sep="",collapse="")}))
return(X)
}
)
#
# Calculate empirical power for the specified GLMM(F,G) and
# corresponding hypothesis
#
setGeneric("empiricalPower",
function(design, glh, replicates, realizations) standardGeneric("empiricalPower"))
setMethod("empiricalPower", "design.glmmFG",
f = function(design, glh, replicates=1000, realizations=1000) {
# Calculate the covariance of errors
invSigmaG = solve(design@SigmaG)
SigmaError = design@SigmaY - design@SigmaYG %*% invSigmaG %*% t(design@SigmaYG)
# calculate the random portion of the beta matrix
BetaRandom = invSigmaG %*% t(design@SigmaYG)
# form the complete Beta matrix
BetaFull = rbind(design@Beta, BetaRandom)
# build the data set names
YNames = sapply(1:ncol(BetaFull), function(x) {paste("Y.",x,sep="",collapse="")})
XFNames = sapply(1:ncol(design@XEssence), function(x) {paste("XF.",x,sep="",collapse="")})
XGNames = sapply(1:ncol(design@SigmaG), function(x) {paste("XG.",x,sep="",collapse="")})
dataNames = c(YNames, XFNames, XGNames)
# create the model statement
model = paste(c(
paste("cbind(", paste(YNames, collapse=", "), ")", collapse=""),
paste(c("0", XFNames, XGNames), collapse=" + ")
), collapse=" ~ ")
# generate realizations of the X matrix
powerValues = sapply(1:realizations,
function(realizationID, Beta, SigmaError, dataNames, model) {
if (realizationID %% 10 == 0) {
print(paste(c("Calculating empirical power for realization", realizationID),
collapse=" "))
}
# get X matrix realization
XMatrix = as.matrix(simulateXMatrix(design))
# calculate empirical power for this realization of X
rejectionList = sapply(1:replicates,
function(replicate, XRealization, Beta, SigmaError,
dataNames, model) {
totalN = nrow(XRealization)
# generate a data set replicate
errorMatrix = mvrnorm(n = totalN, mu=rep(0, nrow(SigmaError)), SigmaError)
yData = XRealization %*% Beta + errorMatrix
dataReplicate = data.frame(yData, XRealization)
names(dataReplicate) = dataNames
# fit the model
fit.glmm = lm(model, dataReplicate)
# test contrasts
test = ifelse(ncol(Beta) == 1, "F", glh@test)
glh.result = linearHypothesis(fit.glmm,
hypothesis.matrix=glh@betweenContrast,
test=test,P=glh@withinContrast)
pvalue = ifelse(ncol(Beta) == 1,
glh.result$"Pr(>F)"[2],
getTestResults(glh.result)$ProbF)
# return 1 if we rejected the null, 0 otherwise
return(as.numeric(pvalue <= glh@alpha))
}, XRealization=as.matrix(XMatrix), Beta=BetaFull,
SigmaError=SigmaError,
dataNames=dataNames, model=model)
# empirical power for a given realization is the percentage of rejections
return(sum(rejectionList)/replicates)
}, Beta=BetaFull, SigmaError=SigmaError, dataNames=dataNames, model=model)
# print(powerValues)
# obtain empirical unconditional power by averaging across the realizations
# of X
return(mean(powerValues))
}
)
setMethod("empiricalPower", "design.glmmFG",
function(design, glh, replicates=1000, realizations=1000) {
# Calculate the covariance of errors
invSigmaG = solve(design@SigmaG)
SigmaError = design@SigmaY - design@SigmaYG %*% invSigmaG %*% t(design@SigmaYG)
# calculate the random portion of the beta matrix
BetaRandom = invSigmaG %*% t(design@SigmaYG)
# form the complete Beta matrix
BetaFull = rbind(design@Beta, BetaRandom)
# build the data set names
YNames = sapply(1:ncol(BetaFull), function(x) {paste("Y.",x,sep="",collapse="")})
XFNames = sapply(1:ncol(design@XEssence), function(x) {paste("XF.",x,sep="",collapse="")})
XGNames = sapply(1:ncol(design@SigmaG), function(x) {paste("XG.",x,sep="",collapse="")})
dataNames = c(YNames, XFNames, XGNames)
# create the model statement
model = paste(c(
paste("cbind(", paste(YNames, collapse=", "), ")", collapse=""),
paste(c("0", XFNames, XGNames), collapse=" + ")
), collapse=" ~ ")
# generate realizations of the X matrix
powerValues = sapply(1:realizations,
function(realizationID, Beta, SigmaError, dataNames, model) {
if (realizationID %% 10 == 0) {
print(paste(c("Calculating empirical power for realization", realizationID),
collapse=" "))
}
# get X matrix realization
XMatrix = as.matrix(simulateXMatrix(design))
# calculate empirical power for this realization of X
rejectionList = sapply(1:replicates,
function(replicate, XRealization, Beta, SigmaError,
dataNames, model) {
totalN = nrow(XRealization)
# generate a data set replicate
errorMatrix = mvrnorm(n = totalN, mu=rep(0, nrow(SigmaError)), SigmaError)
yData = XRealization %*% Beta + errorMatrix
dataReplicate = data.frame(yData, XRealization)
names(dataReplicate) = dataNames
# fit the model
fit.glmm = lm(model, dataReplicate)
# test contrasts
test = ifelse(ncol(Beta) == 1, "F", glh@test)
glh.result = linearHypothesis(fit.glmm,
hypothesis.matrix=glh@betweenContrast,
test=test,P=glh@withinContrast)
pvalue = ifelse(ncol(Beta) == 1,
glh.result$"Pr(>F)"[2],
getTestResults(glh.result)$ProbF)
# return 1 if we rejected the null, 0 otherwise
return(as.numeric(pvalue <= glh@alpha))
}, XRealization=as.matrix(XMatrix), Beta=BetaFull,
SigmaError=SigmaError,
dataNames=dataNames, model=model)
# empirical power for a given realization is the percentage of rejections
return(sum(rejectionList)/replicates)
}, Beta=BetaFull, SigmaError=SigmaError, dataNames=dataNames, model=model)
# print(powerValues)
# obtain empirical unconditional power by averaging across the realizations
# of X
return(mean(powerValues))
}
)
design = new("design.glmmFG",
Beta=matrix(c(1,0,0,0,0,0), nrow=2),
SigmaY=matrix(c(1,0.2,0.2,0.2,1,0.2,0.2,0.2,1), nrow=3),
SigmaYG=matrix(c(0.2,0.4,0.5), nrow=3))
glh = new("glh", betweenContrast=matrix(c(1,-1,0),nrow=1),
withinContrast=matrix(c(1,1,-1,0,0,-1), nrow=3,byrow=TRUE),
thetaNull=matrix(c(0,0), nrow=1))
Rprof("prof.out")
empiricalPower(design, glh, replicates=10, realizations=10)
Rprof(NULL)
library(magic)
library(car)
install.pacakage("car")
install.packages("car")
install.packages("magic")
library(magic)
library(car)
Rprof("prof.out")
empiricalPower(design, glh, replicates=10, realizations=10)
Rprof(NULL)
setwd("~/Documents/Projects/Git/bitbucket/Paper1_CovariatePower/simulationExperiment/R")
prof.out
Rprof("prof.out")
empiricalPower(design, glh, replicates=10, realizations=10)
Rprof(NULL)
summaryRprof("prof.out")
Rprof("prof.out")
empiricalPower(design, glh, replicates=100, realizations=100)
Rprof(NULL)
summaryRprof("prof.out")
install.packages("profr")
plot.profr("prof.out")
library(profr)
plot.profr("prof.out")
